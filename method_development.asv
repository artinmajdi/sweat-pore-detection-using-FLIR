% app_designer_address: 'C:\Users\artin\AppData\Roaming\MathWorks\MATLAB Add-Ons\Collections\App Designer - Image Processing'

clc
clear

dataset_dir = 'F:\RESEARCH\Data7\FLIR\Dataset\video sample\tif\';
index = 183;

im1 = read_image(index, dataset_dir, true);
im1_woBg = removeBackground(im1);
%% enhancing the dots
% sensitivity = 0.4;
% [im_filtered, candidates1] = apply_filter(im1_woBg,0.4);
% E2 = rescale(entropyfilt(im1_woBg2));
% im1_woBg3 = localcontrast(im1_woBg, 0.2, 0.2);

im1_woBg2 = locallapfilt(im1_woBg,0.2,0.2);

h = ones(3,3)/9;
flt2_av = filter2(h,im1_woBg2,"valid");
flt2_av = func_normalize(flt2_av, 1);
h = [-1,-1,-1;-1,8,-1;-1,-1,-1];
flt2b_av = rescale(filter2(h,flt2_av,"valid"));
flt2b_av = func_normalize(flt2, 1);
myshow('joined','imshow', flt2b_av , rescale(flt2))


%%
flt2b_av_hmx = imhmax(flt2b_av,0.3);
A2 = rescale(filter2( fspecial('average',3) ,flt2b_av_hmx,"valid"));
B2 = ~imbinarize(A2,'adaptive','ForegroundPolarity','dark','Sensitivity',0.2);

% myshow('separate','imtool',im1_woBg2, flt2b_av, flt2b_av_hmx)
myshow('joined','imshow', im1_woBg2 , B2)

%%
% watershed_output = watershed(im_filtered_suppressed,4);
% candidates1_watershed = keeping_the_watershed_area(watershed_output, candidates1);
%%
function myshow(separate_joined,mode,varargin)
    for x = 1:length(varargin)
        
        if strcmp(separate_joined,'joined')
            if strcmp(mode,'imshow')
                ax(x) = subplot(1,length(varargin),x); imshow(varargin{x},[]);
            elseif strcmp(mode,'imtool')
                ax(x) = subplot(1,length(varargin),x); imtool(varargin{x},[]);
            end
        else
%                        
            if strcmp(mode,'imshow')
                ax(x) = figure;
                imshow(varargin{x},[]);
            elseif strcmp(mode,'imtool')
                ax(x) = imtool(varargin{x},[]);
            end      
            
        end

    end
    linkaxes(ax)

end

function im1_woBg = removeBackground(im1)
    im1b = im1*0;
    im1b(im1 < 0.1) = 1;
    im1b = imclose(im1b,strel('disk',20));
    
    im1_woBg = im1;
    im1_woBg(im1b==1) = 0;
    
    im1_woBg = func_normalize(im1_woBg - 0.1, 1);
    
end

function im = read_image(index, dataset_dir, normalize)
    
    % dir = 'F:\Datasets\FLIR\video sample\tif\';
    name = ['Rec-000020 - Copy - test_',int2str(index),'.tif'];
    disp(name)
    Dirr = [dataset_dir, name];
    im = imread(Dirr);
    
    if normalize
        im = func_normalize(im,1);
    end

end

function im = func_normalize(im,type)
    mn = min(im(:));
    mx = max(im(:));
    if type == 16
        im = uint16(  (im-mn)*(2^16)/(mx-mn)  );
    elseif type == 8
        im = uint8(  (im-mn)*(2^8)/(mx-mn)  );
    elseif type == 1
        im = (im-mn)/(mx-mn);        
    end
    
    % im1c = histeq(im1_woBg,50);
    % im2 = adaptthresh(im1,'NeighborhoodSize',[3,3], 'ForegroundPolarity','dark', 'Statistic','median');
    
end

function [im1d, im1d_binarize] = apply_filter(im1_woBg,sensitivity)
    % local differentiation
    h = [-1,-1,-1;-1,8,-1;-1,-1,-1];
    im1c = filter2(h,im1_woBg,"valid");
    im1c = func_normalize(im1c, 1);
    
    % local average
    h = ones(3,3)/4;
    im1d = filter2(h,im1c,"valid");
    im1d = func_normalize(im1d, 1);
    
    im1d_binarize = ~imbinarize(im1d,'adaptive','ForegroundPolarity','dark','Sensitivity',sensitivity);
end

function mask = keeping_the_watershed_area(watershed_output, binary_mask)
    mskk = watershed_output;
    mskk(binary_mask == 0) = 0;
    c = unique(mskk(:));
    c(c == 0) = [];
    
    obj = regionprops(watershed_output,'Area','PixelIdxList');
    
    mask = watershed_output*0;
    for i = 1:length(c)
        mask(obj(c(i)).PixelIdxList) = c(i);
    end
end